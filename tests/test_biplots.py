#!/usr/bin/env python
# File created on 16 Apr 2013
from __future__ import division

__author__ = "Yoshiki Vazquez Baeza"
__copyright__ = "Copyright 2011, The Emperor Project"
__credits__ = ["Yoshiki Vazquez Baeza"]
__license__ = "GPL"
__version__ = "1.6.0-dev"
__maintainer__ = "Yoshiki Vazquez Baeza"
__email__ = "yoshiki89@gmail.com"
__status__ = "Development"

from numpy import array

from emperor.biplots import extract_taxa_data

from cogent.util.unit_test import TestCase, main

class TopLevelTests(TestCase):
    
    def setUp(self):
        self.biplot_coords = array([[-0.0520990488006, -0.0108550868341,
            0.00118513950438, -0.0195647012451, -0.0437589801599,
            0.000848245309189, -0.0122035463608, 0.0288287964617,
            -4.84141986706e-09], [-0.00406501716894, -0.0300693128299,
            -0.090316974427, 0.0559730983008, -0.0597265944801, 0.0456519002902,
            -0.054142291901, 0.0668355273511, -4.84141986706e-09],[
            0.0965087039672, -0.0164113801126, 0.0168583314836, 0.0103732287638,
            -0.0225710882818, 0.0283857610935, 3.22664794516e-05,
            0.0290430321474, -4.84141986706e-09], [0.126316230269,
            0.0263889076329, 0.0330227792131, 0.0885396607535, -0.0372547601153,
            0.0638622448577, -0.0224927101495, 0.0902626098256,
            -4.84141986706e-09], [-0.0672105325806, 0.0105941468738,
            -0.00527647509456, -0.0131631383518, 0.0315560857565,
            -0.0199787562498, 0.00815726904809, -0.0175931838803,
            -4.84141986706e-09], [0.118424097634, -0.00197525147278,
            -0.0399274159763, 0.0211233039391, -0.124633799325, 0.0133749785777,
            -0.0384382665152, -0.0584384149046, -4.84141986706e-09],
            [0.228820399536, -0.130142097093, -0.287149447883, 0.0864498846421,
            0.0442951919304, 0.20604260722, 0.0310003571386, 0.0719920436501,
            -4.84141986706e-09], [-0.000909430629502, 0.0116559690557,
            -0.049810186364, 0.0452278786773, -0.12933257558, -0.0214449951683,
            -0.0693407019638, -0.062534332665, -4.84141986706e-09]])

        self.otu_table = array([[0.02739726, 0.04697987, 0.02, 0.04697987, 0.01,
            0.02027027, 0.01360544, 0.01342282, 0.02666667], [0.00684932,
            0.02013423, 0.02, 0.00671141,  0., 0.00675676, 0., 0., 0.], [
            0.14383562, 0.27516779, 0.65333333, 0.52348993, 0.38926174,
            0.69594595, 0.28571429, 0.0738255, 0.19333333], [0., 0.02013423,
            0.03333333, 0.01342282, 0., 0.0472973, 0., 0., 0.], [0.78767123,
            0.45637584, 0.22, 0.39597315, 0.41610738, 0.20945946, 0.70068027,
            0.89932886, 0.77333333], [0.,0.02013423, 0.01333333, 0.00671141,
            0.03355705, 0.00675676, 0., 0., 0.],[0., 0., 0.01333333, 0., 0., 0.,
            0., 0., 0.], [0.03424658, 0.16107383, 0.02666667, 0.00671141,
            0.14765101, 0.01351351, 0., 0.01342282, 0.00666667]])

        self.lineages = ['Root;k__Bacteria;Other',
            'Root;k__Bacteria;p__Actinobacteria', 
            'Root;k__Bacteria;p__Bacteroidetes',
            'Root;k__Bacteria;p__Deferribacteres',
            'Root;k__Bacteria;p__Firmicutes',
            'Root;k__Bacteria;p__Proteobacteria','Root;k__Bacteria;p__TM7',
            'Root;k__Bacteria;p__Tenericutes']

        self.prevalence = array([0.04445514, 0.00972396, 0.6646394, 0.02081361,
            1., 0.01385989, 0., 0.08185147])

    def test_filter_taxa(self):
        """ """
        # test the simple case where you want to retain 5 taxonomic groups
        o_coords, o_table, o_lineages, o_prevalence = extract_taxa_data(
            self.biplot_coords, self.otu_table, self.lineages,self.prevalence,3)

        self.assertFloatEqual(o_coords, array([[-0.0672105325806, 0.0105941468738,
            -0.00527647509456, -0.0131631383518, 0.0315560857565,
            -0.0199787562498, 0.00815726904809, -0.0175931838803,
            -4.84141986706e-09],[0.0965087039672, -0.0164113801126,
            0.0168583314836, 0.0103732287638, -0.0225710882818, 0.0283857610935,
            3.22664794516e-05, 0.0290430321474, -4.84141986706e-09], [
            -0.000909430629502, 0.0116559690557, -0.049810186364,
            0.0452278786773, -0.12933257558, -0.0214449951683,
            -0.0693407019638, -0.062534332665, -4.84141986706e-09]]))
        self.assertFloatEqual(o_table, array([[0.78767123, 0.45637584, 0.22,
            0.39597315, 0.41610738, 0.20945946, 0.70068027, 0.89932886,
            0.77333333], [0.14383562, 0.27516779, 0.65333333, 0.52348993,
            0.38926174, 0.69594595, 0.28571429, 0.0738255, 0.19333333],
            [0.03424658, 0.16107383, 0.02666667, 0.00671141, 0.14765101,
            0.01351351, 0., 0.01342282, 0.00666667]]))
        self.assertEquals(o_lineages, ['Root;k__Bacteria;p__Firmicutes',
            'Root;k__Bacteria;p__Bacteroidetes',
            'Root;k__Bacteria;p__Tenericutes'])
        self.assertFloatEqual(o_prevalence,  array([ 1., 0.6646394, 0.08185147]))

        # test the case where all the elements are requested
        o_coords, o_table, o_lineages, o_prevalence = extract_taxa_data(
            self.biplot_coords,self.otu_table,self.lineages,self.prevalence,-1)

        self.assertFloatEqual(o_coords, array([[-6.72105326e-02, 1.05941469e-02,
            -5.27647509e-03, -1.31631384e-02, 3.15560858e-02, -1.99787562e-02,
            8.15726905e-03, -1.75931839e-02, -4.84141987e-09], [9.65087040e-02,
            -1.64113801e-02, 1.68583315e-02, 1.03732288e-02, -2.25710883e-02,
            2.83857611e-02, 3.22664795e-05, 2.90430321e-02, -4.84141987e-09],
            [-9.09430630e-04, 1.16559691e-02, -4.98101864e-02, 4.52278787e-02,
            -1.29332576e-01, -2.14449952e-02, -6.93407020e-02, -6.25343327e-02,
            -4.84141987e-09], [-5.20990488e-02, -1.08550868e-02, 1.18513950e-03,
            -1.95647012e-02, -4.37589802e-02, 8.48245309e-04, -1.22035464e-02,
            2.88287965e-02, -4.84141987e-09], [1.26316230e-01, 2.63889076e-02,
            3.30227792e-02, 8.85396608e-02, -3.72547601e-02, 6.38622449e-02,
            -2.24927101e-02, 9.02626098e-02, -4.84141987e-09], [1.18424098e-01,
            -1.97525147e-03, -3.99274160e-02, 2.11233039e-02, -1.24633799e-01,
            1.33749786e-02, -3.84382665e-02, -5.84384149e-02, -4.84141987e-09],
            [-4.06501717e-03, -3.00693128e-02, -9.03169744e-02, 5.59730983e-02,
            -5.97265945e-02, 4.56519003e-02, -5.41422919e-02, 6.68355274e-02,
            -4.84141987e-09], [2.28820400e-01, -1.30142097e-01, -2.87149448e-01,
            8.64498846e-02, 4.42951919e-02, 2.06042607e-01, 3.10003571e-02,
            7.19920437e-02, -4.84141987e-09]]))
        self.assertFloatEqual(o_table, array([[ 0.78767123, 0.45637584, 0.22,
            0.39597315, 0.41610738, 0.20945946, 0.70068027, 0.89932886,
            0.77333333], [0.14383562, 0.27516779, 0.65333333, 0.52348993,
            0.38926174, 0.69594595, 0.28571429, 0.0738255, 0.19333333],
            [0.03424658, 0.16107383, 0.02666667, 0.00671141, 0.14765101,
            0.01351351, 0., 0.01342282, 0.00666667], [0.02739726, 0.04697987,
            0.02, 0.04697987, 0.01, 0.02027027, 0.01360544, 0.01342282,
            0.02666667], [ 0., 0.02013423, 0.03333333, 0.01342282, 0.,
            0.0472973, 0., 0., 0.], [ 0. , 0.02013423, 0.01333333, 0.00671141,
            0.03355705, 0.00675676, 0., 0., 0.], [ 0.00684932, 0.02013423,
            0.02, 0.00671141, 0., 0.00675676, 0., 0., 0.], [ 0., 0., 0.01333333,
            0., 0., 0., 0., 0., 0.]]))
        self.assertEquals(o_lineages, ['Root;k__Bacteria;p__Firmicutes',
            'Root;k__Bacteria;p__Bacteroidetes',
            'Root;k__Bacteria;p__Tenericutes', 'Root;k__Bacteria;Other',
            'Root;k__Bacteria;p__Deferribacteres',
            'Root;k__Bacteria;p__Proteobacteria',
            'Root;k__Bacteria;p__Actinobacteria','Root;k__Bacteria;p__TM7'])
        self.assertEquals(o_prevalence, array([ 1., 0.6646394, 0.08185147,
            0.04445514, 0.02081361, 0.01385989, 0.00972396, 0.]))


if __name__ == "__main__":
    main()